/*! DDR Calc | https://github.com/Andrew67/ddr-calc */
/* Game selector CSS */

#display .overlay {
    position: absolute;

    /* Material Design text button: https://material.io/design/components/buttons.html#specs */
    font-size: 14px;
    line-height: 14px;
    color: var(--color-foreground-medium);
    font-weight: 500; /* Medium */
}

:root {
    --duration-fade-in-extra: .12s; /* Duration of fade-in animation during loading of extra components */
}

@keyframes fade-in {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

#game-btn {
    display: block;
    bottom: 16px;
    left: 16px;
    text-align: left;
    text-transform: uppercase;
    /* Increases the touch target for shorter game names, overflows long game names to next line */
    width: 45%;
    word-break: break-all;
    animation-name: fade-in;
    animation-duration: var(--duration-fade-in-extra);
}

/* Set the game button a little higher on devices showing the tab bar, to further avoid touching calculations */
@media (min-height: 600px) {
    #game-btn {
        bottom: 32px;
    }
}

#game-premium-enabled {
    display: block;
}

#game-name {
    margin-left: 4px;
}

/* Inspired by alignment trick from
   https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4 */
.svg-icon {
    display: inline-block;
}

.svg-icon svg {
    top: 0.125em;
    position: relative;
}

/*
  Settings overlay; implements Material Design Side Sheet
  https://material.io/design/components/sheets-side.html

  Clever use of off-screen start positions, opacity, transform and transition allow animations to trigger with one
  toggle of the "show" class on the parent element
*/
.full-screen-overlay {
    position: absolute;
    top: 0;
    /* Start off screen */
    left: -100%;
    width: 100%;
    height: 100%;
    overflow: hidden;
    /* Exit: Delay the transform to hide the entire thing for 200ms so that animations can complete */
    transition: transform 0s .2s;
}

.scrim {
    background-color: black;
    opacity: 0;
    transition: opacity .2s;
    width: 100%;
    height: 100%;
}

.side-sheet {
    position: absolute;
    background-color: var(--color-surface-z16);
    box-shadow: var(--shadow-surface-z16);
    top: 0;
    left: 100%;
    height: 100%;
    /* For slim screens, leave some space for dismissal scrim, and add scrollbars */
    max-width: calc(100% - 44px);
    overflow: auto;
    /* Material Design Accelerate/exit easing: https://material.io/design/motion/speed.html#easing */
    transition: transform .2s cubic-bezier(0.4, 0.0, 1, 1);
}

#game-settings.show {
    transform: translateX(100%);
    /* Entry: Don't delay the transform so that animations can be seen */
    transition-delay: 0s;
}

.show .scrim {
    opacity: 0.32;
    transition: opacity .25s;
}

#game-settings.show .side-sheet {
    transform: translateX(-100%);
    /* Material Design Decelerate/enter easing: https://material.io/design/motion/speed.html#easing */
    transition: transform .25s cubic-bezier(0.0, 0.0, 0.2, 1);
}

#game-settings form {
    padding-top: 5px;
}

#game-settings label, #game-settings legend {
    display: block;
    padding-left: 16px;
    padding-right: 16px;
    white-space: nowrap;
}

#game-settings label {
    position: relative;
    font-size: 16px; /* Material Body 1 */
    line-height: 48px;
}

#game-settings legend {
    font-size: 12px; /* Material Caption */
    line-height: 32px;
}

fieldset {
    border: 0;
    margin: 0;
    padding: 0;
}

/* Enables replacement of platform input with custom SVG with selected state tracked JS-free */
input[type=radio], input[type=checkbox] {
    /* As opposed to display: none, allows keyboard selection */
    position: absolute;
    opacity: 0;
}

input + span.svg-icon svg {
    top: 6px;
    margin-right: 24px;
}

input + span svg .unchecked {
    color: var(--color-foreground-medium);
}

input + span svg .checked {
    opacity: 0;
    transition: opacity .1s;
    color: var(--color-accent);
}

input:checked + span svg .checked {
    opacity: 1;
}

/* Enables focus effect with color change when state changes */
input + span.svg-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: -16px;
    right: 0;
    bottom: 0;
}

input:focus + span.svg-icon::before {
    background: var(--color-foreground-focus);
}

input:checked:focus + span.svg-icon::before {
    background: var(--color-accent-focus);
}
